
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Comments {
  id        String  @id @default(cuid())
  content   String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now()) 
}

model Project {
  id          String     @default(cuid()) @id
  title       String
  description String
  published   Boolean  @default(false)
  tasks       Task[]
  comments    Comments[]
}


model Task {
  id        String     @default(cuid()) @id
  title     String
  date      DateTime
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  priority  Boolean @default(false)

  createdAt DateTime @default(now())
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  comments      Comments[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}